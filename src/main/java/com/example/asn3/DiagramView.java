package com.example.asn3;

import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;

/**
 * A view that contains a canvas to show the drawing and allow user interaction
 */
public class DiagramView extends Pane implements IModelListener, SMModelListener {
    double width, height;

    /** Abstraction of pen **/
    GraphicsContext gc;

    /** Abstraction of paper **/
    Canvas canvas;

    /** model of the state machine node */
    SMModel model;

    /** Interaction model that handles state machine node selection */
    private InteractionModel iModel;


    /**
     * Constructor method
     */
    public DiagramView() {
        width = 800;
        height = 800;
        canvas = new Canvas(width, height);
        gc = canvas.getGraphicsContext2D();
        gc.setFill(Color.BLACK);
        this.setStyle("-fx-background-color: #b3f7ff;");  // sets background color of the "canvas"
        this.getChildren().add(canvas);
    }

    public void setModel(SMModel newModel) {
        model = newModel;
    }

    public void setIModel(InteractionModel newIModel) {
        this.iModel = newIModel;
    }

    /**
     * Method called by the MainUI to attach event handlers to the view components so that the controller can listen in
     * to events generated by the user
     * @param controller calls the model based on user events
     */
    public void setController(AppController controller) {
        canvas.setOnMousePressed(e -> controller.handlePressed(e, e.getX()/width, e.getY()/height));
        canvas.setOnMouseDragged(e -> controller.handleDragged(e, e.getX()/width, e.getY()/height));
        canvas.setOnMouseReleased(e -> controller.handleReleased(e, e.getX()/width, e.getY()/height));
    }

    public void draw() {
        // Clears a portion of the canvas with a transparent color value
        gc.clearRect(0,0,canvas.getWidth(),canvas.getHeight());

        gc.setStroke(Color.BLACK);  // for the boarder of the box
        gc.setFill(Color.YELLOW);  // for the colour of the actual box
        gc.setLineWidth(2.0);
        gc.setLineDashes();  // boarder of the rectangle set to solid

        model.getNodes().forEach(n -> {
            double boxLeft, boxTop, boxWidth, boxHeight;  // dimensions of the box

            // set the rectangle dimensions
            boxLeft = n.left * width;
            boxTop = n.top * height;
            boxWidth = n.width * width;
            boxHeight = n.height * height;

            // changes the boarder of the selected node to indicate user selection
            if (n == iModel.getSelectedNode()) {
                gc.setStroke(Color.RED);
            } else {
                gc.setStroke(Color.BLACK);
            }

            gc.fillRect(boxLeft, boxTop, boxWidth, boxHeight);
            gc.strokeRect(boxLeft, boxTop, boxWidth, boxHeight);
        });
    }

    @Override
    public void iModelChanged() {
        draw();  // handles change in boarder
        System.out.println("now in iModelChanged() of diagramView!");
    }

    @Override
    public void modelChanged() {
        draw();  // handles node creation
        System.out.println("now in modelChanged() of diagramView");
    }
}
