package com.example.asn3;

import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;

/**
 * A view that contains a canvas to show the drawing and allow user interaction
 */
public class DiagramView extends Pane implements IModelListener, SMModelListener {
    double width, height;

    /** Abstraction of pen **/
    GraphicsContext gcNode, gcLink;

    /** Abstraction of paper **/
    Canvas canvas;

    /** model of the state machine node */
    SMModel model;

    /** Interaction model that handles state machine node selection */
    private InteractionModel iModel;



    /**
     * Constructor method
     */
    public DiagramView() {
        width = 800;
        height = 800;
        canvas = new Canvas(width, height);
        gcNode = canvas.getGraphicsContext2D();
        gcLink = canvas.getGraphicsContext2D();
        gcLink.setFill(Color.BLACK);
        gcNode.setFill(Color.BLACK);
        this.setStyle("-fx-background-color: #b3f7ff;");  // sets background color of the "canvas"
        this.getChildren().add(canvas);
    }

    public void setModel(SMModel newModel) {
        model = newModel;
    }

    public void setIModel(InteractionModel newIModel) {
        this.iModel = newIModel;
    }

    /**
     * Method called by the MainUI to attach event handlers to the view components so that the controller can listen in
     * to events generated by the user
     * @param controller calls the model based on user events
     */
    public void setController(AppController controller) {
        canvas.setOnMousePressed(e -> {
            controller.handleCanvasPressed(e, e.getX()/width, e.getY()/height);
        });
        canvas.setOnMouseDragged(e -> {
            controller.handleCanvasDragged(e, e.getX()/width, e.getY()/height);
        });
        canvas.setOnMouseReleased(e -> {
            controller.handleCanvasReleased(e, e.getX()/width, e.getY()/height);
        });
    }

    /**
     * Draw nodes on the canvas
     */
    public void drawNodes() {
        // Clears a portion of the canvas with a transparent color value
        gcNode.clearRect(0,0,canvas.getWidth(),canvas.getHeight());

        gcNode.setStroke(Color.BLACK);  // for the boarder of the box
        gcNode.setFill(Color.YELLOW);  // for the colour of the actual box
        gcNode.setLineWidth(2.0);
        gcNode.setLineDashes();  // boarder of the rectangle set to solid

        model.getNodes().forEach(n -> {
            double boxLeft, boxTop, boxWidth, boxHeight;  // set dimensions of the box
            boxLeft = n.left * width;
            boxTop = n.top * height;
            boxWidth = n.width * width * 1.5;
            boxHeight = n.height * height;

            // changes the boarder of the selected node to indicate user selection
            if (n == iModel.getSelectedNode()) {
                gcNode.setStroke(Color.RED);
            } else {
                gcNode.setStroke(Color.BLACK);
            }
            gcNode.fillRect(boxLeft, boxTop, boxWidth, boxHeight);
            gcNode.strokeRect(boxLeft, boxTop, boxWidth, boxHeight);
        });
    }

    public void drawLinks() {
//        gcNode.clearRect(0,0,canvas.getWidth(),canvas.getHeight());
        gcNode.setStroke(Color.BLACK);
        gcNode.setLineWidth(2);
        model.getLinks().forEach(line -> {
            line.doTransforms();
            gcNode.strokeLine(line.tx1,line.ty1,line.tx2,line.ty2);
        });
    }


    @Override
    public void iModelChanged() {
        drawNodes();  // handles change in boarder
    }

    @Override
    public void modelChanged() {
        drawNodes();  // handles node creation
        if (iModel.getTransitionLinkControl()) drawLinks();

//        if (iModel.getTransitionLinkControl() && iModel.isLinkDragging()) drawHoveringLink(mouseX, mouseY);
//        if (iModel.getTransitionLinkControl() && !iModel.isLinkDragging()) {
//            // the mouse dragging is released, meaning a line has been created
//        }
    }
}
